

/**
 * @fileoverview UI events triggered by the uploader library.
 *
 * @author bleper@google.com (Bartosz Leper)
 */

goog.provide('apps.uploader.ui.EventType');
goog.provide('apps.uploader.ui.FileEvent');
goog.provide('apps.uploader.ui.FileListEvent');

goog.require('goog.events.Event');

/**
 * Event types fired by the UI classes.
 * @enum {string}
 */
apps.uploader.ui.EventType = {
  /**
   * A {@link apps.uploader.File} instance has been added to the file list.
   * Fired by {@link apps.uploader.ui.BaseUploader} and descendants.
   * Event type: {@link apps.uploader.ui.FileEvent}.
   */
  FILE_ADDED: 'fileadded',

  /**
   * A {@link apps.uploader.File} instance has been removed from the file list.
   * Fired by {@link apps.uploader.ui.BaseUploader} and descendants.
   * Event type: {@link apps.uploader.ui.FileEvent}.
   */
  FILE_REMOVED: 'fileremoved',

  /**
   * User selected some files. Fired by {@link apps.uploader.ui.BaseUploader}
   * and descendants. Event type:
   * {@link apps.uploader.BaseUploader.FileListEvent}.
   */
  FILES_SELECTED: 'filesselected',

  /**
   * The {@link apps.uploader.Session} associated with a given file has been
   * created. This event is fired by {@link apps.uploader.ui.BaseUploader} and
   * descendants right before the session info is sent to the upload server.
   * Event type: {@link apps.uploader.ui.FileEvent}
   */
  FILE_SESSION_CREATED: 'filesessioncreated',

  /**
   * The {@link apps.uploader.netFileIo} associated with a given file has been
   * created. This event is fired right before the upload of the file begins.
   * Event type: {@link apps.uploader.ui.FileEvent}
   */
  FILE_IO_CREATED: 'fileiocreated',

  /**
   * @deprecated Use FILE_IO_CREATED instead.
   */
  FILE_UPLOAD_CREATED: 'fileiocreated',

  /**
   * All uploads have been processed, regardless of success state.
   * Fired by {@link apps.uploader.ui.BaseUploader} and descendants.
   * Event type: {@link goog.events.Event}.
   */
  ALL_FILES_COMPLETED: 'allfilescompleted',

  /**
   * Upload state of a file item changed. Fired by
   * {@link apps.uploader.ui.BaseUploader} and descendants. Event type:
   * {@link apps.uploader.ui.FileEvent}.
   */
  UPLOAD_STATE_CHANGED: 'uploadstatechanged',

  //  Remove all events before this comment when the old API is
  // removed.

  /**
   * User pressed the "remove" button. Fired by
   * {@link apps.uploader.ui.FileItem} and descendants. Event type:
   * {@link goog.events.Event}.
   */
  REMOVE_FILE_CLICKED: 'removeclicked',

  /**
   * User pressed the "cancel" button. Fired by
   * {@link apps.uploader.ui.FileItem} and descendants. Event type:
   * {@link goog.events.Event}.
   */
  CANCEL_UPLOAD_CLICKED: 'cancelclicked',

  /**
   * User pressed the "pause" button. Fired by
   * {@link apps.uploader.ui.ResumableFileItem}. Event type:
   * {@link goog.events.Event}
   */
  PAUSE_UPLOAD_CLICKED: 'pauseclicked',

  /**
   * User pressed the "resume" button. Fired by
   * {@link apps.uploader.ui.ResumableFileItem}. Event type:
   * {@link goog.events.Event}
   */
  RESUME_UPLOAD_CLICKED: 'resumeclicked',

  /**
   * User pressed the "retry" button. Fired by
   * {@link apps.uploader.ui.FileItem}. Event type:
   * {@link goog.events.Event}
   */
  RETRY_UPLOAD_CLICKED: 'retryclicked',

  // The following events are only generated by the
  // {@link app.uploader.ui.FlashUploader} upload mechanism and attempt to
  // mimic events you would normally get from the DOM.

  /**
   * User mouses over the Flash API overlay.
   * Event type: {@link goog.events.Event}.
   */
  FLASH_MOUSE_OVER: 'flashmouseover',

  /**
   * User mouses out of the Flash API overlay.
   * Event type: {@link goog.events.Event}.
   */
  FLASH_MOUSE_OUT: 'flashmouseout',

  /**
   * User clicks in the Flash API overlay.
   * Event type: {@link goog.events.Event}.
   */
  FLASH_MOUSE_CLICK: 'flashmouseclick'
};

//  Remove FileListEvent and FileEvent when the old API is
// removed.

/**
 * A class for events dispatched by uploaders when file list changes.
 * @param {apps.uploader.ui.EventType} type The event type.
 * @param {Array.<apps.uploader.File>} files Files that were affected.
 * @param {Object} opt_target Target of this event.
 * @constructor
 * @extends {goog.events.Event}
 */
apps.uploader.ui.FileListEvent = function(type, files, opt_target) {
  goog.events.Event.call(this, type, opt_target);

  /**
   * Files that were affected by this event.
   * @type {Array.<apps.uploader.File>}
   */
  this.files = files;
};
goog.inherits(apps.uploader.ui.FileListEvent, goog.events.Event);

/**
 * A class for events dispatched when an individual file is affected.
 * @param {string} type The event type.
 * @param {apps.uploader.File} file The affected file.
 * @param {Object} opt_target Target of this event.
 * @constructor
 * @extends {goog.events.Event}
 */
apps.uploader.ui.FileEvent = function(type, file, opt_target) {
  goog.events.Event.call(this, type, opt_target);

  /**
   * File affected by this event.
   * @type {apps.uploader.File}
   */
  this.file = file;
};
goog.inherits(apps.uploader.ui.FileEvent, goog.events.Event);
