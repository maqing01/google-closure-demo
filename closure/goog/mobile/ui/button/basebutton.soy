{namespace wireless.soy.button.base autoescape="contextual"}

/**
 * @param? elementId
 * @param? controlType
 * @param? imageClassesHtml
 * @param? labelHtml
 * @param? labelClassesHtml
 * @param? contentsHtml
 * @param? maxWidth
 * @param? isActive
 * @param? extraEventArgument
 * @param? buttonClassesHtml
 * @param? borderImageClassesHtml
 * @param? isHidden
 * @param? ariaLabel
 * @param? ariaLabelledby
 * @param? dontStretch
 */
{template .plainButton autoescape="contextual"}
  {call .buttonBegin_ data="all" /}
  {if $imageClassesHtml}
    <div class="{css CSS_WUI_BUTTON_INNER} {css CSS_WUI_ENABLED} {$imageClassesHtml|noAutoescape}
        {if $isActive}
          {sp}{css CSS_WUI_ACTIVE}
        {/if}">
    </div>
  {/if}
  {if $labelHtml}
    <div class="{css CSS_WUI_BUTTON_INNER} {css CSS_WUI_ENABLED}
        {if $labelClassesHtml}
          {sp}{$labelClassesHtml}
        {/if}
        {if $maxWidth}
          {sp}{css CSS_WUI_ELLIPSIS}
        {/if}
        {if $isActive}
          {sp}{css CSS_WUI_ACTIVE}
        {/if}"
        {if $maxWidth} style="max-width:{$maxWidth}"{/if}>
      {$labelHtml|noAutoescape}
    </div>
  {/if}
  {if $contentsHtml}
    {$contentsHtml |noAutoescape}
  {/if}
  {call .buttonEnd_ /}
{/template}

/**
 * Renders a button with an image, text, or custom HTML.
 * @param? elementId The id to assign the outer button element.
 * @param? controlType The control type to use for the event generated by
 *     clicking on the button.
 * @param? imageClasses A space-separated list of CSS classes required to
 *     display the image. Typically this will be a single class for an unsprited
 *     image (e.g. CSS_WUI_IMG_SEARCH) and two classes for a sprited image (e.g.
 *     CSS_SPRITE CSS_IMG_HAPPY_FACE). No escaping is applied to this value.
 * @param? labelHtml The label to display on the button. Clients are responsible
 *     for escaping this value.
 * @param? labelClasses CSS classes to apply to the button's label.
 * @param? contentsHtml The raw HTML to insert into the button.
 * @param? maxWidth The maximum width for the button, e.g. '40px'. This is used
 *     as the value for the CSS max-width attribute. If the label exceeds this
 *     width, it will be truncated with an ellipsis.
 * @param? isActive Whether the button is initially in the active state. This
 *     state can be controlled using a StickyButton from JavaScript code.
 * @param? extraEventArgument An extra argument that will be sent with events
 *     generated by this button.
 * @param? buttonClasses CSS classes to apply to the button's outer div.
 * @param? borderImageClasses CSS classes to apply as the button's border
 *     image.
 * @param? isHidden True if button should be initially hidden.
 * @param? ariaHidden True if the button is hidden to aria clients. Set with
 *     caution. See
 *     http://www.w3.org/TR/wai-aria/states_and_properties#aria-hidden
 *     for when this value should be set.
 * @param? ariaLabel alt text for image buttons so they are accessible.
 * @param? ariaLabelledby Id of an element with the alt text of this button.
 * @param? ariaChecked The current checked state for applicable ARIA roles.
 * @param? dontStretch Buttons by default will fill horizontal space because
 *     their display is block. This will set display to inline-block.
 */
{template .plainButtonStrict}
  {call .buttonBeginStrict_ data="all" /}
  {if $imageClasses}
    <div class="{css CSS_WUI_BUTTON_INNER} {css CSS_WUI_ENABLED} {$imageClasses}
        {if $isActive}
          {sp}{css CSS_WUI_ACTIVE}
        {/if}">
    </div>
  {/if}
  {if $labelHtml}
    <div class="{css CSS_WUI_BUTTON_INNER} {css CSS_WUI_ENABLED}
        {if $labelClasses}
          {sp}{$labelClasses}
        {/if}
        {if $maxWidth}
          {sp}{css CSS_WUI_ELLIPSIS}
        {/if}
        {if $isActive}
          {sp}{css CSS_WUI_ACTIVE}
        {/if}"
        {if $maxWidth} style="max-width:{$maxWidth}"{/if}>
      {$labelHtml}
    </div>
  {/if}
  {if $contentsHtml}
    {$contentsHtml}
  {/if}
  {call .buttonEnd_ /}
{/template}

/**
 * Deprecated non-strict template.
 * Renders a standard button with common styles applied.
 * @param? buttonClassesHtml CSS classes to apply to the button's outer div. All
 *     buttons will always have the classes CSS_WUI_NO_TAP_HIGHLIGHT.
 */
{template .button autoescape="contextual"}
  {call .plainButton data="all" }
    {param buttonClassesHtml}
      {css CSS_WUI_BUTTON_IMPL} {css CSS_WUI_NO_TAP_HIGHLIGHT}
      {if $buttonClassesHtml} {$buttonClassesHtml}{/if}
    {/param}
  {/call}
{/template}

/**
 * Renders a standard button with common styles applied.
 * @param? buttonClasses CSS classes to apply to the button's outer div. All
 *     buttons will always have the classes CSS_WUI_NO_TAP_HIGHLIGHT.
 */
{template .buttonStrict}
  {call .plainButtonStrict data="all" }
    {param buttonClasses }
      {css CSS_WUI_BUTTON_IMPL} {css CSS_WUI_NO_TAP_HIGHLIGHT}
      {if $buttonClasses} {$buttonClasses}{/if}
    {/param}
  {/call}
{/template}

/**
 * Deprecated non-strict template.
 * Renders the beginning of the outer div for a button. This markup should
 * immediately precede the button's contents (inner div). See .buttonBeginStrict_
 * for a description of this template's parameters.
 * @param? elementId
 * @param? controlType
 * @param? isSticky
 * @param? useOnClick
 * @param? isActive
 * @param? extraEventArgument
 * @param? buttonClassesHtml
 * @param? borderImageClassesHtml
 * @param? isHidden
 * @param? ariaLabel
 * @param? ariaLabelledby
 * @param? ariaRole
 * @param? ariaChecked
 * @param? dontStretch
 */
{template .buttonBegin_ private="true" autoescape="contextual"}
  <div {if $elementId}id="{$elementId}" {/if}
      class="{css CSS_WUI_BUTTON} {css CSS_WUI_ENABLED}
          {if $buttonClassesHtml}
            {sp}{$buttonClassesHtml|noAutoescape}
          {/if}
          {if $borderImageClassesHtml}
            {sp}{$borderImageClassesHtml|noAutoescape}
          {/if}
          {if $isSticky}
            {sp}{css CSS_WUI_BUTTON_STICKY}
          {/if}
          {if $isActive}
            {sp}{css CSS_WUI_ACTIVE}
          {/if}
          {if $useOnClick}
            {sp}{css CSS_WUI_BUTTON_USE_ONCLICK_MARKER}
          {/if}
          {if $dontStretch}
            {sp}{css CSS_WUI_INLINE_BLOCK}
          {/if}"
      {if $isHidden} style="display:none" {/if}
      {if $controlType}
        // goog.isDef is used here instead of if(value) to allow falsy values
        // as extraEventArguments, e.g. the number 0 or an empty string.
        onclick="_x(event, '{$controlType|id}'
            {if goog.isDef($extraEventArgument)}, {$extraEventArgument|noAutoescape}{/if})"
      {/if}

      tabindex="0"
      >
{/template}

/**
 * Renders the beginning of the outer div for a button. This markup should
 * immediately precede the button's contents (inner div).
 * @param? elementId The id to assign the outer button element.
 * @param? controlType The control type to use for the event generated by
 *     clicking on the button.
 * @param? isSticky Whether the button can be toggled between active and
 *     inactive states.
 * @param? useOnClick Whether to send the click event in a click event instead
 *     a touchend event.
 * @param? isActive Whether the button is initially in the active state. This
 *     state can be controlled using a StickyButton from JavaScript code.
 * @param? extraEventArgument An extra argument that will be sent with events
 *     generated by this button.
 * @param? buttonClasses CSS classes to apply to the button's outer div.
 * @param? borderImageClasses CSS classes to apply as the button's border
 *     image.
 * @param? isHidden True if button should be initially hidden.
 * @param? ariaHidden True if the button is hidden to aria clients. Set with
 *     caution. See
 *     http://www.w3.org/TR/wai-aria/states_and_properties#aria-hidden
 *     for when this value should be set.
 * @param? ariaLabel alt text for image buttons so they are accessible.
 * @param? ariaLabelledby Id of an element with the alt text of this button.
 * @param? ariaRole The ARIA role for this button. Defaults to "button".
 * @param? ariaChecked The current checked state for applicable ARIA roles.
 * @param? dontStretch Buttons by default will fill horizontal space because
 *     their display is block. This will set display to inline-block.
 */
{template .buttonBeginStrict_ private="true"}
  <div {if $elementId}id="{$elementId}" {/if}
      class="{css CSS_WUI_BUTTON} {css CSS_WUI_ENABLED}
          {if $buttonClasses}
            {sp}{$buttonClasses}
          {/if}
          {if $borderImageClasses}
            {sp}{$borderImageClasses}
          {/if}
          {if $isSticky}
            {sp}{css CSS_WUI_BUTTON_STICKY}
          {/if}
          {if $isActive}
            {sp}{css CSS_WUI_ACTIVE}
          {/if}
          {if $useOnClick}
            {sp}{css CSS_WUI_BUTTON_USE_ONCLICK_MARKER}
          {/if}
          {if $dontStretch}
            {sp}{css CSS_WUI_INLINE_BLOCK}
          {/if}"
      {if $isHidden} style="display:none" {/if}
      {if $controlType}
        // goog.isDef is used here instead of if(value) to allow falsy values
        // as extraEventArguments, e.g. the number 0 or an empty string.
        onclick="_x(event, '{$controlType}'
            {if $extraEventArgument}, {$extraEventArgument}{/if})"
      {/if}

      {if $ariaHidden}
        aria-hidden="true"
      {/if}

      {if $ariaRole}
        role="{$ariaRole}"
      {else}
        role="button"
      {/if}

      {if $ariaLabel}
        aria-label="{$ariaLabel}"
      {/if}

      {if $ariaLabelledby}
        aria-labelledby="{$ariaLabelledby}"
      {/if}

      {if $isSticky && $isActive}
//        aria-pressed="true"
      {elseif $isSticky}
//        aria-pressed="false"
      {/if}

      {if $ariaChecked}
        aria-checked="{$ariaChecked}"
      {/if}

      tabindex="0"
      >
{/template}

/**
 * Renders the end of the outer div for a button. This markup should immediately
 * follow the button's contents (inner div).
 */
{template .buttonEnd_ private="true"}
  </div>
{/template}
