goog.provide('office.localstore.LocalStoreFactory');



/**
 * An interface for creating instances of office.localstore.LocalStore.
 * Implementations may include a desktop Chrome-specific implementation that is
 * schema version aware and schema-upgradeable, or mobile app-specific versions
 * that provide native-bridged storage adapters.
 * @interface
 */
office.localstore.LocalStoreFactory = function() {};


/**
 * Checks that the specified user is allowed to interact with the LocalStore.
 * For example, on desktop, checks might include whether the user is opted in
 * and whether the Chrome application is configured correctly to support offline
 * behavior.
 * @param {!office.localstore.User} user
 * @return {boolean} Whether the user is authorized.
 */
office.localstore.LocalStoreFactory.prototype.isUserAuthorized =
    goog.abstractMethod;


/**
 * Creates the LocalStore instance.
 * @param {function(!office.localstore.LocalStoreError)} errorCallback The
 *     callback for the default error handler for errors generated by LocalStore
 *     after it has been successfully created.
 * @param {boolean=} opt_reportOpenDatabaseTiming Whether open database timing
 *     should be reported to CSI.
 * @return {!goog.async.Deferred} A deferred result that will contain a
 *     LocalStoreFactoryResult, or will call the deferred's error callback with
 *     a LocalStoreError indicating that the local store could not be created.
 */
office.localstore.LocalStoreFactory.prototype.create = goog.abstractMethod;


/** @return {boolean} Whether file storage is supported. */
office.localstore.LocalStoreFactory.prototype.supportsFileStorage =
    goog.abstractMethod;
