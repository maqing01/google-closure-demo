

/**
 * @fileoverview Implementation of a generic callout menu.
 * @author dominicl@google.com (Dominic Leung)
 * @author rjdixon@google.com (Ryan Dixon)
 */

goog.provide('wireless.ui.Callout');
goog.provide('wireless.ui.callout.ControlType');

goog.require('goog.asserts');
goog.require('goog.dom');
goog.require('wireless.dom');
goog.require('wireless.events.browser.ControlType');
goog.require('wireless.events.browser.HandlerMap');
//goog.require('wireless.soy.callout');
goog.require('wireless.ui');


/**
 * Control types associated with callout functionality.
 * @enum {wireless.events.browser.ControlType}
 */
wireless.ui.callout.ControlType = {
  CLICKAWAY_CALLOUT:
      wireless.events.browser.ControlType.create('cc')
};



/**
 * Callout menu that can render various components.
 * @param {!Element} element The element containing the callout. This must have
 *     the CSS class CSS_WUI_CALLOUT_MARKER.
 * @param {!Element} anchor The DOM element that should appear directly above
 *     the callout.
 * @param {function()} opt_clickAwayCallback The callback to invoke when a click
 *     occurs outside of callout. Defaults to wireless.ui.Callout.hide.
 * @param {boolean=} opt_positionAboveAnchor True if the callout should be
 *     above the anchor instead of under.
 * @param {!Element=} opt_container The element to append the callout to.
 *     Defaults to document.body if not specified.
 * @constructor
 */
wireless.ui.Callout = function(element, anchor, opt_clickAwayCallback,
    opt_positionAboveAnchor, opt_container) {
  goog.asserts.assert(wireless.dom.hasClass(element,
      wireless.ui.Callout.MAIN_CLASS),
      'Element does not appear to be a callout.');

  /**
   * The callout menu element.
   * @type {!Element}
   * @private
   */
  this.element_ = wireless.ui.use(element);

  /**
   * The callout will appear centered directly below this element
   * @type {!Element}
   * @private
   */
  this.anchor_ = anchor;

  /**
   * The callout element will be appended to this container.
   * @type {!Element}
   * @private
   */
  this.container_ = /** @type {!Element} */ (opt_container || document.body);

  /**
   * True if the callout should appear above the anchor instead of under.
   * @type {boolean|undefined}
   * @private
   */
  this.positionAboveAnchor_ = opt_positionAboveAnchor;

  // Only listen to clickaway events if the clickaway div is present. Otherwise,
  // this object might respond to clickaway events for another callout.
  if (wireless.dom.getFirstElementByClassName(
      wireless.ui.Callout.CLICKAWAY_CLASS_, this.element_)) {
    /**
     * The handler map for events generated by this component.
     * @type {!wireless.events.browser.HandlerMap}
     * @private
     */
    this.handlerMap_ = new wireless.events.browser.HandlerMap(undefined,
        'Callout');
    this.handlerMap_.registerHandler(
        wireless.ui.callout.ControlType.CLICKAWAY_CALLOUT,
            opt_clickAwayCallback || goog.bind(this.hide, this));
  }
};


/**
 * The CSS class applied to the element containing the callout.
 * @type {string}
 */
// wireless.ui.Callout.MAIN_CLASS = goog.getCssName('');
wireless.ui.Callout.MAIN_CLASS = goog.getCssName('CSS_WUI_CALLOUT_MARKER');


/**
 * The CSS class applied to the element containing the click away div.
 * @type {string}
 * @private
 */
// wireless.ui.Callout.CLICKAWAY_CLASS_ = goog.getCssName('');
wireless.ui.Callout.CLICKAWAY_CLASS_ = goog.getCssName('CSS_WUI_OVERLAY');


/**
 * The CSS class applied to the element containing the callout contents.
 * @type {string}
 * @private
 */
// wireless.ui.Callout.CONTENTS_CLASS_ = goog.getCssName('');
wireless.ui.Callout.CONTENTS_CLASS_ =
    goog.getCssName('CSS_WUI_CALLOUT_CONTENTS');



/**
 * The CSS class applied to the element containing the pointer.
 * @type {string}
 * @private
 */
wireless.ui.Callout.POINTER_CLASS_ =
    goog.getCssName('CSS_WUI_CALLOUT_OUTER_POINTER');


/**
 * The CSS class applied to link elements.
 * @type {string}
 */
wireless.ui.Callout.LINK_CLASS = goog.getCssName('CSS_WUI_CALLOUT_LINK');


/**
 * Gets the callout's element.
 * @return {!Element} The outer element.
 */
wireless.ui.Callout.prototype.getElement = function() {
  return this.element_;
};


/**
 * Gets the element containing the contents part of the callout.
 * @return {!Element} The contents div.
 */
wireless.ui.Callout.prototype.getContentsElement = function() {
  return /** @type {!Element} */ (wireless.dom.getFirstElementByClassName(
      wireless.ui.Callout.CONTENTS_CLASS_, this.element_));
};


/**
 * Creates a new callout from the given HTML fragment. The created callout
 * element is not added to the DOM until the callout is shown.
 * @param {string} calloutHtml The markup for the callout. This must be created
 *     using the Soy template wireless.soy.callout.callout.
 * @param {!Element} anchor The element which should be located above the
 *     callout.
 * @param {function()} opt_clickAwayCallback The callback to invoke when a click
 *     occurs outside of callout. Defaults to wireless.ui.Callout.hide.
 * @return {!wireless.ui.Callout} A new callout instance created from the given
 *     HTML.
 * @param {boolean=} opt_positionAboveAnchor True if the callout should be
 *     above the anchor instead of under.
 * @param {!Element=} opt_container The element to append the callout to.
 *     Defaults to document.body if not specified.
 */
wireless.ui.Callout.create = function(calloutHtml, anchor,
    opt_clickAwayCallback, opt_positionAboveAnchor, opt_container) {
  var div = document.createElement('div');
  div.innerHTML = calloutHtml;
  return new wireless.ui.Callout(/** @type {!Element} */ (div.firstChild),
      anchor, opt_clickAwayCallback, opt_positionAboveAnchor, opt_container);
};


/**
 * Creates a new callout from the given HTML fragment and immediately shows it.
 * @param {string} calloutHtml The markup for the callout. This must be created
 *     using the Soy template wireless.soy.callout.callout.
 * @param {!Element} anchor The element which should be located above the
 *     callout.
 * @param {function()} opt_clickAwayCallback The callback to invoke when a click
 *     occurs outside of callout. Defaults to wireless.ui.Callout.hide.
 * @return {!wireless.ui.Callout} A new callout instance created from the given
 *     HTML.
 */
wireless.ui.Callout.createAndShow = function(calloutHtml, anchor,
    opt_clickAwayCallback) {
  var callout = wireless.ui.Callout.create(calloutHtml, anchor,
      opt_clickAwayCallback);
  callout.show();
  return callout;
};


/** Toggle visibility of callout menu. */
wireless.ui.Callout.prototype.toggleVisible = function() {
  if (this.isVisible_) {
    this.hide();
  } else {
    this.show();
  }
};


/**
 * Check visibility of callout.
 * @return {boolean} True if callout is visible, false otherwise.
 */
wireless.ui.Callout.prototype.isVisible = function() {
  return this.isVisible_;
};


/**
 * Update the callout's HTML if it has changed.
 * @param {string} calloutHtml The markup for the callout. This must be created
 *      using the Soy template wireless.soy.callout.callout.
 */
wireless.ui.Callout.prototype.updateCalloutHtml = function(calloutHtml) {
  var div = document.createElement('div');
  div.innerHTML = calloutHtml;
  this.element_.innerHTML = div.firstChild.innerHTML;
};


/**
 * Appends the element to the DOM if it hasn't been already, and update the
 * position if necessary.
 * @private
 */
wireless.ui.Callout.prototype.maybePosition_ = function() {
  if (!this.elementAppended_) {
    // If the element is visible then it is initially shown out of position.
    // Appending it to the container after it is positioned doesn't work since
    // because it's size isn't calculated correctly when it is not in the DOM.
    this.element_.style.visibility = 'hidden';
    this.container_.appendChild(this.element_);
    this.elementAppended_ = true;
  }

  this.reposition();

  this.element_.style.visibility = '';
};


/**
 * Position the pointer arrow if it exists.
 * @param {number} verticalAnchor The vertical position of the top of the
 *     callout.
 * @param {number} anchorCenter The horizontal position of the callout.
 * @private
 */
wireless.ui.Callout.prototype.positionPointer_ =
    function(verticalAnchor, anchorCenter) {
  var pointerDiv = wireless.dom.getFirstElementByClassName(
      wireless.ui.Callout.POINTER_CLASS_, this.element_);
  if (!pointerDiv) {
    return;
  }

  var pointerHalfWidth = pointerDiv.offsetWidth / 2;
  var pointerOffsetHeight = pointerDiv.offsetHeight;
  var pointerOffsetWidth = pointerDiv.offsetWidth;
  var pointerTop = this.positionAboveAnchor_ ?
      verticalAnchor - pointerOffsetHeight : verticalAnchor;
  pointerDiv.style.left = anchorCenter - (pointerOffsetWidth / 2) + 'px';
  pointerDiv.style.top = pointerTop + 'px';
  verticalAnchor += this.positionAboveAnchor_ ?
      1 - pointerOffsetHeight : pointerOffsetHeight - 1;
};

/**
 * Position the callout to be centered at its anchor
 * @param {number} verticalAnchor The vertical position of the top of the
 *     callout.
 * @param {number} anchorCenter The horizontal position of the callout.
 * @private
 */
wireless.ui.Callout.prototype.positionContents_ =
    function(verticalAnchor, anchorCenter) {
  var containerWidth = this.container_.offsetWidth;
  var contentsDiv = this.getContentsElement();
  var contentsHalfWidth = contentsDiv.offsetWidth / 2;
  var contentsTop = this.positionAboveAnchor_ ?
      verticalAnchor - contentsDiv.offsetHeight : verticalAnchor;

  contentsDiv.style.top = contentsTop + 'px';
  contentsDiv.style.left = (anchorCenter - contentsHalfWidth) + 'px';
};

/** Displays the callout. */
wireless.ui.Callout.prototype.show = function() {
  if (!this.isVisible_) {
    goog.style.setElementShown(this.element_, true);
    this.maybePosition_();
    this.isVisible_ = true;
    // Will only have a handler map if callout has a clickaway div.
    if (this.handlerMap_) {
      wireless.events.browser.HandlerMap.getRoot().appendChildDispatcher(
          this.handlerMap_);
    }
  }
};


/** Hides the callout. */
wireless.ui.Callout.prototype.hide = function() {
  if (this.isVisible_) {
    goog.style.setElementShown(this.element_, false);
    this.isVisible_ = false;
    if (this.handlerMap_) {
      wireless.events.browser.HandlerMap.getRoot().removeChildDispatcher(
          this.handlerMap_);
    }
  }
};


/** Reposition the callout. */
wireless.ui.Callout.prototype.reposition = function() {
  var offsetContainer = this.container_.offsetParent;
  var anchor = this.anchor_;
  var containerOffsetTop =
      wireless.dom.calculateAbsoluteOffsetTop(anchor, offsetContainer);
  var containerOffsetLeft =
      wireless.dom.calculateAbsoluteOffsetLeft(anchor, offsetContainer);

  var verticalAnchor = this.positionAboveAnchor_ ? containerOffsetTop :
      containerOffsetTop + anchor.offsetHeight;
  var anchorCenter = containerOffsetLeft + (anchor.offsetWidth / 2);

  this.positionPointer_(verticalAnchor, anchorCenter);
  this.positionContents_(verticalAnchor, anchorCenter);
};
